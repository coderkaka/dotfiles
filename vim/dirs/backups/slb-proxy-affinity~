#!/bin/bash
#
# slb-irqbind         Network Irq Affinity
#
# chkconfig: 2345 14 95
# description:  change network irq affinity.

. /etc/init.d/functions

RETVAL=0
prog="slb-proxy-irqbind"
lockfile=/var/lock/subsys/$prog
irqscripts="/etc/sysconfig/slb-proxy-irq-affinity"

irqbind_init() {
    #网卡数组
    net_dev=(`for dev in /sys/class/net/*/device ; do awk -F/ '{print $5}' <<< ${dev} ; done`)
    [ "${#net_dev[@]}" = 0 ] && { echo "bindirq() error, Can not get the nics"; exit 1; }

    #激活网卡IRQ数组
    net_irq=(`for i in ${net_dev[@]} ; do awk '/'${i}'-/{print $1}' /proc/interrupts | sed 's/[: ]//g' ; done`)

    #IRQ与网卡的对应关系
    irq_net=(`for i in ${net_irq[@]} ; do awk '/ '${i}':/{print $NF}' /proc/interrupts ; done`)

    #激活网卡队列数
    net_q=${#net_irq[@]}
    [ "$net_q" = 0 ] && { echo "bindirq() error, Can not get the nic queue"; exit 1; }

    #处理器核数
    cpu_n=`grep -c processor /proc/cpuinfo`
    [ "$cpu_n" = 0 ] && { echo "bindirq() error, Can not get the cpu"; exit 1; }

    #网卡中断在核上的次数
    m=0
    for irq in ${net_irq[@]}; do
        net_irq_hit[m]=$( for((i=0;i<cpu_n;i++)) ; do awk -v n=$((i+2)) '/ '$irq':/{print $n}' /proc/interrupts; done | sort -rn | head -1 )
        ((m++))
    done

    #处理器掩码
    cpu_mask_bin=`for((i=0;i<cpu_n;i++));do echo -n '1';done`
    cpu_mask_hex=`echo "obase=16;ibase=2; $cpu_mask_bin"|bc`
}

tengine_start() {
	local worker=(`pgrep -lf "nginx: worker process" | grep -v "shutting down" | awk '{print $1}'`)
	if [ "${#worker[@]}" == 8 ]; then
		local num_40g=0
		local dev_list=(`for dev in /sys/class/net/*/device ; do awk -F/ '{print $5}' <<< ${dev} ; done`)
		[ "${#dev_list[@]}" = 0 ] && { echo "Can not get the nics"; exit 1; }
		for i in ${dev_list[@]}; do
			local is_40g=`ethtool -i $i | grep i40e > /dev/null; echo $?`
			if [ "$is_40g" == "0" ]; then
				((num_40g++))
			fi
		done
		if [ "$num_40g" == 4 ]; then
			local core_num=`grep processor /proc/cpuinfo | wc -l`
			if [ "$core_num" == "32" ]; then
				local core_id=8
				for pid in ${worker[@]}; do
					taskset -cp $core_id $pid > /dev/null 2>&1
					((core_id++))
				done
			fi
		fi
	else
		local core_id=0
		for pid in ${worker[@]}; do
			taskset -cp $core_id $pid > /dev/null 2>&1
			((core_id++))
		done
	fi

}

tengine_stop() {

	local core_id=0
	local worker=`pgrep -lf "nginx: worker process" | grep -v "shutting down" | awk '{print $1}'`
	for pid in ${worker[@]}; do
		taskset -cp $core_id $pid > /dev/null 2>&1
		((core_id++))
	done
}

tengine_show() {
	ps -eo pid,args,psr | grep "nginx: worker process" | grep -v "shutting down" | grep -v grep
}

start() {
    echo -n $"Starting $prog: "
    RETVAL=0
    [[ ! -x "$irqscripts" ]] && echo "'$irqscripts' not executable, quit" >&2 && exit 5
    $irqscripts ${net_dev[@]}
    RETVAL=$?
    [ $RETVAL -eq 0 ] && touch $lockfile && success || failure
    echo
    return $RETVAL
}

stop() {
    echo -n $"Stoping $prog: (clean lockfile only) "
    rm -f $lockfile && success || failure
}

flush() {
    echo -n $"Flush $prog: "
    RETVAL=0
    for((i=0;i<net_q;i++)) ; do
        irq=${net_irq[i]}
        echo $cpu_mask_hex > /proc/irq/$irq/smp_affinity
    done
    RETVAL=$?
    [ $RETVAL -eq 0 ] && rm -f $lockfile && success || failure
    echo
    return $RETVAL
}

show() {
   # 显示当前情况
   for i in /proc/net/bonding/*bond* ; do
       echo ----------------------
       echo "`basename $i` ->"
       echo "`awk -F: '/Bonding Mode/{print $0}' $i` "
       grep Interface $i
       echo ----------------------
   done
   echo "nic_queue irq smp_affinity irq_count"
   for((i=0;i<net_q;i++)) ; do
       irq=${net_irq[i]}
       smp_affinity=$(</proc/irq/$irq/smp_affinity)
       echo ${irq_net[i]} ${net_irq[i]} ${smp_affinity} ${net_irq_hit[i]}
   done | column -t
}

status() {
    if [ -f $lockfile ] ; then
        echo "$0 is running."
        return 0
    else
        echo "$0 is not running."
        return 1
    fi
}

usage() {
    echo "Usage: $0 {start|stop|origin-start|tengine-start|tengine-stop|tengine-show|flush|status|show}"
    exit 1
}

#main()
case "$1" in
  start)
	irqbind_init
	start
	;;
  stop)
	irqbind_init
	stop
	;;
  tengine-start)
	tengine_start
	;;
  tengine-stop)
	tengine_stop
	;;
  tengine-show)
	tengine_show
	;;
  flush)
	irqbind_init
	flush
	;;
  restart)
	irqbind_init
	stop
	start
	;;
  status)
	status
	;;
  show)
	irqbind_init
	show
	;;
  *)
	usage
	;;
esac
