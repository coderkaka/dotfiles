 ,v
#,v
t,v
o,v
n,v
            return ,V
False,v
_instance,v
                  ,1
o  TLS_NULL_WITH_NULL_NULL   o  TLS_RSA_WITH_NULL_MD5   o  TLS_RSA_WITH_NULL_SHA   o  TLS_RSA_EXPORT_WITH_RC4_40_MD5   o  TLS_RSA_WITH_RC4_128_MD5   o  TLS_RSA_WITH_RC4_128_SHA   o  TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5   o  TLS_RSA_WITH_IDEA_CBC_SHA   o  TLS_RSA_EXPORT_WITH_DES40_CBC_SHA   o  TLS_RSA_WITH_DES_CBC_SHA   o  TLS_RSA_WITH_3DES_EDE_CBC_SHA   o  TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA   o  TLS_DH_DSS_WITH_DES_CBC_SHA   o  TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA   o  TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA   o  TLS_DH_RSA_WITH_DES_CBC_SHA   o  TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA   o  TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   o  TLS_DHE_DSS_WITH_DES_CBC_SHA   o  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA   o  TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHABelshe, et al.               Standards Track                   [Page 83] RFC 7540                         HTTP/2                         May 2015   o  TLS_DHE_RSA_WITH_DES_CBC_SHA   o  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA   o  TLS_DH_anon_EXPORT_WITH_RC4_40_MD5   o  TLS_DH_anon_WITH_RC4_128_MD5   o  TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA   o  TLS_DH_anon_WITH_DES_CBC_SHA   o  TLS_DH_anon_WITH_3DES_EDE_CBC_SHA   o  TLS_KRB5_WITH_DES_CBC_SHA   o  TLS_KRB5_WITH_3DES_EDE_CBC_SHA   o  TLS_KRB5_WITH_RC4_128_SHA   o  TLS_KRB5_WITH_IDEA_CBC_SHA   o  TLS_KRB5_WITH_DES_CBC_MD5   o  TLS_KRB5_WITH_3DES_EDE_CBC_MD5   o  TLS_KRB5_WITH_RC4_128_MD5   o  TLS_KRB5_WITH_IDEA_CBC_MD5   o  TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA   o  TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA   o  TLS_KRB5_EXPORT_WITH_RC4_40_SHA   o  TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5   o  TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5   o  TLS_KRB5_EXPORT_WITH_RC4_40_MD5   o  TLS_PSK_WITH_NULL_SHA   o  TLS_DHE_PSK_WITH_NULL_SHA   o  TLS_RSA_PSK_WITH_NULL_SHABelshe, et al.               Standards Track                   [Page 84] RFC 7540                         HTTP/2                         May 2015   o  TLS_RSA_WITH_AES_128_CBC_SHA   o  TLS_DH_DSS_WITH_AES_128_CBC_SHA   o  TLS_DH_RSA_WITH_AES_128_CBC_SHA   o  TLS_DHE_DSS_WITH_AES_128_CBC_SHA   o  TLS_DHE_RSA_WITH_AES_128_CBC_SHA   o  TLS_DH_anon_WITH_AES_128_CBC_SHA   o  TLS_RSA_WITH_AES_256_CBC_SHA   o  TLS_DH_DSS_WITH_AES_256_CBC_SHA   o  TLS_DH_RSA_WITH_AES_256_CBC_SHA   o  TLS_DHE_DSS_WITH_AES_256_CBC_SHA   o  TLS_DHE_RSA_WITH_AES_256_CBC_SHA   o  TLS_DH_anon_WITH_AES_256_CBC_SHA   o  TLS_RSA_WITH_NULL_SHA256   o  TLS_RSA_WITH_AES_128_CBC_SHA256   o  TLS_RSA_WITH_AES_256_CBC_SHA256   o  TLS_DH_DSS_WITH_AES_128_CBC_SHA256   o  TLS_DH_RSA_WITH_AES_128_CBC_SHA256   o  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256   o  TLS_RSA_WITH_CAMELLIA_128_CBC_SHA   o  TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA   o  TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA   o  TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA   o  TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA   o  TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHABelshe, et al.               Standards Track                   [Page 85] RFC 7540                         HTTP/2                         May 2015   o  TLS_DHE_RSA_WITH_AES_128_CBC_SHA256   o  TLS_DH_DSS_WITH_AES_256_CBC_SHA256   o  TLS_DH_RSA_WITH_AES_256_CBC_SHA256   o  TLS_DHE_DSS_WITH_AES_256_CBC_SHA256   o  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256   o  TLS_DH_anon_WITH_AES_128_CBC_SHA256   o  TLS_DH_anon_WITH_AES_256_CBC_SHA256   o  TLS_RSA_WITH_CAMELLIA_256_CBC_SHA   o  TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA   o  TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA   o  TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA   o  TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA   o  TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA   o  TLS_PSK_WITH_RC4_128_SHA   o  TLS_PSK_WITH_3DES_EDE_CBC_SHA   o  TLS_PSK_WITH_AES_128_CBC_SHA   o  TLS_PSK_WITH_AES_256_CBC_SHA   o  TLS_DHE_PSK_WITH_RC4_128_SHA   o  TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA   o  TLS_DHE_PSK_WITH_AES_128_CBC_SHA   o  TLS_DHE_PSK_WITH_AES_256_CBC_SHA   o  TLS_RSA_PSK_WITH_RC4_128_SHA   o  TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA   o  TLS_RSA_PSK_WITH_AES_128_CBC_SHABelshe, et al.               Standards Track                   [Page 86] RFC 7540                         HTTP/2                         May 2015   o  TLS_RSA_PSK_WITH_AES_256_CBC_SHA   o  TLS_RSA_WITH_SEED_CBC_SHA   o  TLS_DH_DSS_WITH_SEED_CBC_SHA   o  TLS_DH_RSA_WITH_SEED_CBC_SHA   o  TLS_DHE_DSS_WITH_SEED_CBC_SHA   o  TLS_DHE_RSA_WITH_SEED_CBC_SHA   o  TLS_DH_anon_WITH_SEED_CBC_SHA   o  TLS_RSA_WITH_AES_128_GCM_SHA256   o  TLS_RSA_WITH_AES_256_GCM_SHA384   o  TLS_DH_RSA_WITH_AES_128_GCM_SHA256   o  TLS_DH_RSA_WITH_AES_256_GCM_SHA384   o  TLS_DH_DSS_WITH_AES_128_GCM_SHA256   o  TLS_DH_DSS_WITH_AES_256_GCM_SHA384   o  TLS_DH_anon_WITH_AES_128_GCM_SHA256   o  TLS_DH_anon_WITH_AES_256_GCM_SHA384   o  TLS_PSK_WITH_AES_128_GCM_SHA256   o  TLS_PSK_WITH_AES_256_GCM_SHA384   o  TLS_RSA_PSK_WITH_AES_128_GCM_SHA256   o  TLS_RSA_PSK_WITH_AES_256_GCM_SHA384   o  TLS_PSK_WITH_AES_128_CBC_SHA256   o  TLS_PSK_WITH_AES_256_CBC_SHA384   o  TLS_PSK_WITH_NULL_SHA256   o  TLS_PSK_WITH_NULL_SHA384   o  TLS_DHE_PSK_WITH_AES_128_CBC_SHA256Belshe, et al.               Standards Track                   [Page 87] RFC 7540                         HTTP/2                         May 2015   o  TLS_DHE_PSK_WITH_AES_256_CBC_SHA384   o  TLS_DHE_PSK_WITH_NULL_SHA256   o  TLS_DHE_PSK_WITH_NULL_SHA384   o  TLS_RSA_PSK_WITH_AES_128_CBC_SHA256   o  TLS_RSA_PSK_WITH_AES_256_CBC_SHA384   o  TLS_RSA_PSK_WITH_NULL_SHA256   o  TLS_RSA_PSK_WITH_NULL_SHA384   o  TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256   o  TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256   o  TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256   o  TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256   o  TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256   o  TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256   o  TLS_EMPTY_RENEGOTIATION_INFO_SCSV   o  TLS_ECDH_ECDSA_WITH_NULL_SHA   o  TLS_ECDH_ECDSA_WITH_RC4_128_SHA   o  TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA   o  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHABelshe, et al.               Standards Track                   [Page 88] RFC 7540                         HTTP/2                         May 2015   o  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA   o  TLS_ECDHE_ECDSA_WITH_NULL_SHA   o  TLS_ECDHE_ECDSA_WITH_RC4_128_SHA   o  TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA   o  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA   o  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA   o  TLS_ECDH_RSA_WITH_NULL_SHA   o  TLS_ECDH_RSA_WITH_RC4_128_SHA   o  TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA   o  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA   o  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA   o  TLS_ECDHE_RSA_WITH_NULL_SHA   o  TLS_ECDHE_RSA_WITH_RC4_128_SHA   o  TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA   o  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA   o  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA   o  TLS_ECDH_anon_WITH_NULL_SHA   o  TLS_ECDH_anon_WITH_RC4_128_SHA   o  TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA   o  TLS_ECDH_anon_WITH_AES_128_CBC_SHA   o  TLS_ECDH_anon_WITH_AES_256_CBC_SHA   o  TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA   o  TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA   o  TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHABelshe, et al.               Standards Track                   [Page 89] RFC 7540                         HTTP/2                         May 2015   o  TLS_SRP_SHA_WITH_AES_128_CBC_SHA   o  TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA   o  TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA   o  TLS_SRP_SHA_WITH_AES_256_CBC_SHA   o  TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA   o  TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA   o  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256   o  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384   o  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256   o  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384   o  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256   o  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384   o  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256   o  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384   o  TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256   o  TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384   o  TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256   o  TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384   o  TLS_ECDHE_PSK_WITH_RC4_128_SHA   o  TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA   o  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA   o  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA   o  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256   o  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384Belshe, et al.               Standards Track                   [Page 90] RFC 7540                         HTTP/2                         May 2015   o  TLS_ECDHE_PSK_WITH_NULL_SHA   o  TLS_ECDHE_PSK_WITH_NULL_SHA256   o  TLS_ECDHE_PSK_WITH_NULL_SHA384   o  TLS_RSA_WITH_ARIA_128_CBC_SHA256   o  TLS_RSA_WITH_ARIA_256_CBC_SHA384   o  TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256   o  TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384   o  TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256   o  TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384   o  TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256   o  TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384   o  TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256   o  TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384   o  TLS_DH_anon_WITH_ARIA_128_CBC_SHA256   o  TLS_DH_anon_WITH_ARIA_256_CBC_SHA384   o  TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256   o  TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384   o  TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256   o  TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384   o  TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256   o  TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384   o  TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256   o  TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384   o  TLS_RSA_WITH_ARIA_128_GCM_SHA256Belshe, et al.               Standards Track                   [Page 91] RFC 7540                         HTTP/2                         May 2015   o  TLS_RSA_WITH_ARIA_256_GCM_SHA384   o  TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256   o  TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384   o  TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256   o  TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384   o  TLS_DH_anon_WITH_ARIA_128_GCM_SHA256   o  TLS_DH_anon_WITH_ARIA_256_GCM_SHA384   o  TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256   o  TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384   o  TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256   o  TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384   o  TLS_PSK_WITH_ARIA_128_CBC_SHA256   o  TLS_PSK_WITH_ARIA_256_CBC_SHA384   o  TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256   o  TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384   o  TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256   o  TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384   o  TLS_PSK_WITH_ARIA_128_GCM_SHA256   o  TLS_PSK_WITH_ARIA_256_GCM_SHA384   o  TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256   o  TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384   o  TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256   o  TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384   o  TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256Belshe, et al.               Standards Track                   [Page 92] RFC 7540                         HTTP/2                         May 2015   o  TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256   o  TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384   o  TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256Belshe, et al.               Standards Track                   [Page 93] RFC 7540                         HTTP/2                         May 2015   o  TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256   o  TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384   o  TLS_RSA_WITH_AES_128_CCM   o  TLS_RSA_WITH_AES_256_CCM   o  TLS_RSA_WITH_AES_128_CCM_8   o  TLS_RSA_WITH_AES_256_CCM_8   o  TLS_PSK_WITH_AES_128_CCM   o  TLS_PSK_WITH_AES_256_CCM   o  TLS_PSK_WITH_AES_128_CCM_8   o  TLS_PSK_WITH_AES_256_CCM_8,V
   o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o     o  ,6
103.195.6.172",v
i,v
139.162.63.36",v
%,v
%h_%p_%r,v
#    ControlPath /tmp/ssh_mux_%h_%p_%r,V
>>>>>>> 62109d22... add toa support,V
=======,V
#define VTOA_SO_GET_VXLAN   (VTOA_BASE_CTL+2),V
<<<<<<< HEAD,V
2400:8901::f03c:91ff:fe90:d9ef",v
# encoding: utf-8# owner: 张琼# X-Forwarded-EIP 中通路情况下的基本基本测试# 测试点：#   server端使用tcpdump抓包保存到pcap文件中，然后直接grep二进制文件中的X-Forwarded-EIP: xxxx"#   add test cases for rulesimport timeimport jsonimport stringimport randomimport pytestimport slbqatimport loggingimport alitestimport threadingfrom slb_ops    import *from slbqat     import apifrom random     import randintfrom slbqat.api import db as apidbfrom alitest import http_util, system_utilfrom slbqat.master import db as masterdblogger = logging.getLogger(__name__)slb_obj = slb_ops()__vport4__ = 60081__bport4__ = 80__persistence_timeout__ = 5__loop_times__ = 10__download_file__ = "file1k"__pcap_file__ = "proxy.pcap"__tcpdump_file__ = "tcpdump.txt"def setup_module(module):    slb_obj.start_module(module)def setup_function(function):    slb_obj.start_case()def teardown_function(function):    slb_obj.end_case()def check_result(vms, client, eip, vport=__vport4__, in_vid=0, domain=None):    slb_obj.wait_lvs_config_ready(eip, vport, in_vid)    time.sleep(3)    resp = slb_obj.curl_status_code(client, eip, vport)    assert resp[0] == 0,V
# encoding: utf-8# owner: 张琼# X-Forwarded-EIP 中通路情况下的基本基本测试# 测试点：#   server端使用tcpdump抓包保存到pcap文件中，然后直接grep二进制文件中的X-Forwarded-EIP: xxxx"#   add test cases for rulesimport timeimport jsonimport stringimport randomimport pytestimport slbqatimport loggingimport alitestimport threadingfrom slb_ops    import *from slbqat     import apifrom random     import randintfrom slbqat.api import db as apidbfrom alitest import http_util, system_utilfrom slbqat.master import db as masterdblogger = logging.getLogger(__name__)slb_obj = slb_ops()__vport4__ = 60081__bport4__ = 80__persistence_timeout__ = 5__loop_times__ = 10__download_file__ = "file1k"__pcap_file__ = "proxy.pcap"__tcpdump_file__ = "tcpdump.txt"def setup_module(module):    slb_obj.start_module(module)def setup_function(function):    slb_obj.start_case()def teardown_function(function):    slb_obj.end_case()def check_result(vms, client, eip, vport=__vport4__, in_vid=0, domain=None):    slb_obj.wait_lvs_config_ready(eip, vport, in_vid)    time.sleep(3)    resp = slb_obj.curl_status_code(client, eip, vport)    assert resp[0] == 0    assert resp[1] == '200'    for vm in vms:        slb_obj.execute_remote_cmd(vm['ALI_IP'], "killall tcpdump")        time.sleep(2)        slb_obj.execute_remote_cmd(vm['ALI_IP'],            "nohup tcpdump -i any -nn port 80 -w /tmp/%s 2>/dev/null >/tmp/%s &" % (            __pcap_file__, __tcpdump_file__))    if domain is None:        domain_param = ""        time.sleep(15)    else:        (ret, out, err) = slb_obj.execute_remote_cmd(client, 'echo "%s  %s" | tee -a /etc/hosts' % (eip, domain))        #print "\n---->ret:%s" % ret + "---->out:" + out + "---->err:" + err        time.sleep(35)        domain_param = '''-H "Host: %s"''' % (domain)    slb_obj.execute_remote_cmd(client, "curl -v --connect-timeout 10 %s:%s/%s -o /tmp/%s" % (        eip, __vport4__, __download_file__, __download_file__))    time.sleep(2)    for vm in vms:        slb_obj.execute_remote_cmd(vm['ALI_IP'], "killall tcpdump")        time.sleep(2)        result = slb_obj.execute_remote_cmd(vm['ALI_IP'],            'grep -i "X-Forwarded-EIP" /tmp/%s' % (__pcap_file__))        if result[1].find("matches") > 0:            return    #time.sleep(200)    assert Falsedef clear_testcase_files(vms, client):    for vm in vms:        slb_obj.execute_remote_cmd(vm['ALI_IP'],"killall tcpdump")        slb_obj.execute_remote_cmd(vm['ALI_IP'],"rm -rf /tmp/%s" % (__pcap_file__))        slb_obj.execute_remote_cmd(vm['ALI_IP'],"rm -rf /tmp/%s" % (__tcpdump_file__))    slb_obj.execute_remote_cmd(client, "rm -f /tmp/%s" % (__download_file__))def clear_testcase_resource(lb_id, vms, rs_pool_name, client):   clear_testcase_files(vms, client)   # try:   #     clear_testcase_files(vms, client)   # finally:   #     try:   #         slb_obj.delete_lb(lb_id)   #     finally:   #         slb_obj.delete_rs_pool(rs_pool_name)@marker.function@pytest.mark.test_way('''    构建listen,验证X-Forwarded-EIP配置是否正确''')@pytest.mark.test_points(    "验证通路配置，正常访问返回200，配置正确",    "配置X-Forwarded-EIP，server端使用tcpdump抓包，验证抓包文件中是否包含X-Forwarded-EIP",)def test_06_classic_ip_vip_vpc_inner_ip():    client1 = slb_obj.get_classis_clients()[0]['ALI_IP']    vms = slb_obj.get_classis_servers()    in_vid = 0    rs_pool_name = data_generator.gen_str('<l,10>')    slb_obj.create_http_rs_pool(__bport4__, rs_pool_name)    wild_conf = {        "x_forwarded_eip": "127.1.1.1",        "x_forwarded_eip_switch": "on",        "backend_connect_retries": "2",        "backend_connect_timeout": "8"    }    all_config = {        "vip_config": wild_conf,        "rs_pool_name": rs_pool_name,        "vport": __vport4__,        "bport": __bport4__,	    "servers": [vms[0], vms[1]]    }    ret = slb_obj.build_simple_service(all_config)    assert ret == True    eip = all_config["eip"]    lb_id = all_config["lb_id"]    #add_vip_and_config_vip(lb_id, __vport4__, __bport4__, rs_pool_name)    try:        check_result(vms, client1, eip, __vport4__, in_vid)    finally:        clear_testcase_resource(lb_id, vms, rs_pool_name, client1),V
}''',V
}        ,V
slb_hide_cookie upstream=52680_r_1056_;                 ,V
ups 52680_r_1056_;                      ,V
slb_upstream_keepalive off;                      ,V
match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       ,V
match_variables 1 "uri" "/*";                    ,V
match_variables 0 "host" "*.aliyun.com";                ,V
prio_location 10011 {                   ,V
,V
},V
prio_location 10010 {                   ,V
prio_location 10009 {                   ,V
}prio_location 10009 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10010 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10011 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }        }'''    (ret, out, err) = slb_ops_ref.execute_remote_cmd(slb_ops_ref.get_proxy(), cmd_dyconf)    #cmd_dyaccept = "curl -s -X POST 127.0.0.1:6677/dyaccept/50041 -d 'ssl off;bk_https 1;'"    #(ret, out, err) = slb_ops_ref.execute_remote_cmd(slb_ops_ref.get_proxy(), cmd_dyaccept)    time.sleep(2)    #send traffic    cmd = "curl -s http://%s:50061" % slb_ops_ref.get_proxy()    (ret, out, err) = execute_local_cmd(cmd)    #check result    cmd = "curl -s 127.0.0.1//check_vip_reqstat | grep 50061"    (ret, out, err) = slb_ops_ref.execute_remote_cmd(slb_ops_ref.get_proxy(), cmd)    out = out.strip('\n').split(',')    #print (out[70], out[69], out[68], out[67], out[66],out[65])    assert(int(out[70]) > 0)        check_slbdstat(70,"50061"),V
}prio_location 10009 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10010 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10011 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }        }'''    (ret, out, err) = slb_ops_ref.execute_remote_cmd(slb_ops_ref.get_proxy(), cmd_dyconf)    #cmd_dyaccept = "curl -s -X POST 127.0.0.1:6677/dyaccept/50041 -d 'ssl off;bk_https 1;'"    #(ret, out, err) = slb_ops_ref.execute_remote_cmd(slb_ops_ref.get_proxy(), cmd_dyaccept)    time.sleep(2)    #send traffic    cmd = "curl -s http://%s:50061" % slb_ops_ref.get_proxy()    (ret, out, err) = execute_local_cmd(cmd)    #check result    cmd = "curl -s 127.0.0.1//check_vip_reqstat | grep 50061"    (ret, out, err) = slb_ops_ref.execute_remote_cmd(slb_ops_ref.get_proxy(), cmd)    out = out.strip('\n').split(',')    #print (out[70], out[69], out[68], out[67], out[66],out[65])    assert(int(out[70]) > 0)        check_slbdstat(70,"50061")@marker.v1908@marker.function@pytest.mark.test_way('''    test dsl rule''')@pytest.mark.test_points(    "curl and check additional headers are added "),V
match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10005 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10006 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10007 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10008 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      ,V
slb_keepalive_timeout 15;               slb_limit_req_rate 40000;                slb_proxy_read_timeout 60;              prio_location 2147483647 {                      ups 888;                      slb_hide_cookie upstream=52680;          }               prio_location 10000 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }  prio_location 10001 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10002 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10003 {                   match_variables 0 "host" "*.aliyun.com";                match_variables 1 "uri" "/*";                    match_variables 0 "http_cookie" "*beta_user=new_user_a*";                       slb_upstream_keepalive off;                      ups 52680_r_1056_;                      slb_hide_cookie upstream=52680_r_1056_;                 }prio_location 10004 {                   ,V
if __name__ == "__main__":,V
    if len(sys.argv) == 2:,V
        action = sys.argv[1],V
        if action == "clean":,V
            suite = unittest.TestSuite(),V
            suite.addTest(agentTestCase("testClean")),V
            runner = unittest.TextTestRunner(),V
            runner.run(suite),V
            exit(0),V
    suite = unittest.TestSuite(),V
    #suite.addTest(agentTestCase("testCustomTransferConditions")),V
    suite.addTest(agentTestCase("testCustomTransferActions")),V
    runner.run(suite),V
    runner = unittest.TextTestRunner(),V
if ,V
                     "rpm":"slb-drop-logcache",                     "version":"0.0.5-1327646.alios7.x86_64",V
const ,v
s,v
c,v
/,v
modules,v
x86_64,v
4,v
6,v
_,v
8,v
x,v
4.9.79-009.ali3000.alios7.x86_64,v
    cd /home/taofang.tf/aiTesterServer/ ;,V
&& tnpm i && tnpm run dev",V
&& ,V
&,v
cd /home/taofang.tf/aiTesterServer/ \,v
    cd  /home/taofang.tf/aiTesterServer/ &&  tnpm i && tnpm run dev;,V
--no-checkout,v
\,v
",v
install/,v
taobao/,v
aone-base/tmall-testplatform_7u:20200406192443,v
# 指定运行时的系统环境变量,如下请替换appName为自己应用名称,V
ENV BUILD_APP_NAME tmall-testplatform,V
&& tnpm i ,V
&& cd /home/taofang.tf/aiTesterServer/ \,V
&& git clone http://gitlab.alibaba-inc.com/iz/aiTesterServer.git /home/taofang.tf/ \,V
&& git clone http://gitlab.alibaba-inc.com/iz/aiTesterServer.git /home/taofang.tf/ \&& cd /home/taofang.tf/aiTesterServer/ \&& tnpm i \,V
&& echo "export PATH=$PATH:/opt/taobao/install/nodejs/bin" >> /home/taofang.tf/.bashrc \,V
&& touch /home/taofang.tf/.bashrc  \,V
a,v
b,v
nodejs.tar.gz,v
l,v
m,v
u,v
y,v
export NVS_HOME="/home/taofang.tf/git/nvs" \,v
&& nvs use 10 \,V
&& nvs add 10 \,V
RUN source $NVS_HOME/nvs.sh \,V
